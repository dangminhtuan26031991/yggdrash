syntax = "proto3";

option java_package = "io.yggdrash.proto";
option java_outer_classname = "Proto";

import "google/protobuf/timestamp.proto";

service Peer {
    rpc findPeers (TargetPeer) returns (PeerList) {
    }
    rpc ping (Ping) returns (Pong) {
    }
}

message BlockList {
    repeated Block blocks = 1;
}

message TransactionList {
    repeated Transaction transactions = 1;
}

message Block {
    message Header {
        bytes chain = 1;
        bytes version = 2;          // Version indicates message protocol version
        bytes type = 3;
        bytes prevBlockHash = 4;    // The hash of the previous block header
        uint64 index = 5;            // The index in the blockchain
        google.protobuf.Timestamp timestamp = 6;        // google.protobuf.Timestamp timestamp ?
        bytes merkleRoot = 7;       // The hash of the BlockBody, by MerkleTree
        uint64 bodyLength = 8;
    }

    Header header = 1;
    bytes signature = 2;
    TransactionList body = 3;
}

message Transaction {
    message Header {
        bytes chain = 1;
        bytes version = 2;
        bytes type = 3;
        bytes timestamp = 4;
        bytes bodyHash = 5;
        bytes bodyLength = 6;
    }
    Header header = 1;
    bytes signature = 2;
    bytes body = 3;
}

message TargetPeer {
    string pubKey = 1;
    string ip = 2;
    int32 port = 3;
    bytes branch = 4;
    // Fields can be added (i.e.Expiration ...etc)
}

message PeerList {
    repeated PeerInfo peers = 1;
}

message PeerInfo {
    string url = 1;
    int64 bestBlock = 2;
}

message Ping {
    string ping = 1;
    string from = 2;
    string to = 3;
    bytes branch = 4;
    int64 bestBlock = 5;
}

message Pong {
    string pong = 1;
    string from = 2;
}