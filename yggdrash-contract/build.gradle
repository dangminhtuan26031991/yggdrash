import java.security.MessageDigest

ext {
    importPackage =
                    "io.yggdrash.common.contract" +
                    ",io.yggdrash.common.contract.method" +
                    ",io.yggdrash.common.contract.vo" +
                    ",io.yggdrash.common.contract.vo.dpoa" +
                    ",io.yggdrash.common.contract.vo.dpoa.tx" +
                    ",io.yggdrash.common.crypto" +
                    ",io.yggdrash.common.crypto.jce" +
                    ",io.yggdrash.common.exception" +
                    ",io.yggdrash.common.store" +
                    ",io.yggdrash.common.store.datasource" +
                    ",io.yggdrash.common.utils" +

                    ",org.osgi.framework" +
                    ",org.osgi.util.tracker" +
                    ",com.google.gson" +
                    ",org.w3c.dom" +
                    ",org.slf4j" +
                    ",java.math" +
                    ",io.yggdrash.contract.core" +
                    ",io.yggdrash.contract.core.annotation" +
                    ",io.yggdrash.contract.core.store"


    excludeList = ["META-INF/LICENSE", "META-INF/NOTICE", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/NOTICE"]
}


task dpoaContract(type: Jar) {
    //Add current module source
    from(sourceSets.main.output) {
        include "**"
        exclude(["system-contracts"])
    }

    // Add dependency library
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }

    manifest {
        attributes(
                'Bundle-ManifestVersion': '2',
                'Bundle-Name': 'DPoA Contract',
                'Bundle-Description': 'DPoA Contract',
                'Bundle-Vendor': 'YGGDRASH',
                'Bundle-SymbolicName': 'io.yggdrash.contract.dpoa.DPoAContract',
                'Bundle-Version': '1.0.0',
                'Bundle-Activator': 'io.yggdrash.contract.dpoa.DPoAContract',
                'Export-Package': "io.yggdrash.contract.dpoa",
                'Import-Package': "${importPackage}"
        )
    }
    exclude(excludeList)
    preserveFileTimestamps = false
    archiveName "system-dpoa-contract-${manifest.attributes.get('Bundle-Version')}.jar"
}

task dpoaClientContract(type: Jar) {
    //Add current module source
    from(sourceSets.main.output) {
        include "**"
        exclude(["system-contracts"])
    }

    // Add dependency library
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }

    manifest {
        attributes(
                'Bundle-ManifestVersion': '2',
                'Bundle-Name': 'DPoA Client Contract',
                'Bundle-Description': 'DPoA Client Contract',
                'Bundle-Vendor': 'YGGDRASH',
                'Bundle-SymbolicName': 'io.yggdrash.contract.dpoa.DPoAClientContract',
                'Bundle-Version': '1.0.0',
                'Bundle-Activator': 'io.yggdrash.contract.dpoa.DPoAClientContract',
                'Import-Package': "${importPackage},io.yggdrash.contract.dpoa"
        )
    }
    exclude(excludeList)
    preserveFileTimestamps = false
    archiveName "system-dpoa-client-contract-${manifest.attributes.get('Bundle-Version')}.jar"

}

task coinContract(type: Jar) {
    //Add current module source
    from(sourceSets.main.output) {
        include "**"
        exclude(["system-contracts"])
    }

    // Add dependency library
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }

    manifest {
        attributes(
                'Bundle-ManifestVersion': '2',
                'Bundle-Name': 'Coin Contract',
                'Bundle-Description': 'Coin Contract',
                'Bundle-Vendor': 'YGGDRASH',
                'Bundle-SymbolicName': 'io.yggdrash.contract.coin.CoinContract',
                'Bundle-Version': '1.0.0',
                'Bundle-Activator': 'io.yggdrash.contract.coin.CoinContract',
                'Import-Package': "${importPackage}"
        )
    }
    preserveFileTimestamps = false
    exclude(excludeList)
    archiveName "system-coin-contract-${manifest.attributes.get('Bundle-Version')}.jar"
}

task noneContract(type: Jar) {
    //Add current module source
    from(sourceSets.main.output) {
        include "**"
        exclude(["system-contracts"])
    }

    // Add dependency library
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }

    manifest {
        attributes(
                'Bundle-ManifestVersion': '2',
                'Bundle-Name': 'None Contract',
                'Bundle-Description': 'None Contract',
                'Bundle-Vendor': 'YGGDRASH',
                'Bundle-SymbolicName': 'io.yggdrash.contract.NoneContract',
                'Bundle-Version': '1.0.0',
                'Bundle-Activator': 'io.yggdrash.contract.NoneContract',
                'Import-Package': "${importPackage}"
        )
    }
    exclude(excludeList)
    preserveFileTimestamps = false
    archiveName "system-none-contract-${manifest.attributes.get('Bundle-Version')}.jar"
}


task contractsPackage() {
    dependsOn dpoaContract
    dependsOn coinContract
    dependsOn noneContract
}

/*
def keystoreFile = new File("${project.projectDir.toString()}/src/main/resources/yggdrash.p12")
def keystorePass = '098098'
def keyAlias = 'yggdrash'

task signJar(description: 'to Sign JAR.', group: 'Build') {

    dependsOn dpoaContract
    dependsOn coinContract
    dependsOn noneContract
//    dependsOn dpoaClientContract

    doLast {
        def libFiles = file('build/libs').listFiles()
        libFiles.each {
            if (it.name.startsWith("${project.name}")) {
                return
            }
            ant.jar(destfile: it, update: true) {
                delegate.manifest {
                    attribute(name: 'permissions', value: 'all-permissions')
                    attribute(name: 'codebase', value: '*')
                }
            }

            ant.signjar(
                    tsaurl: 'http://sha256timestamp.ws.symantec.com/sha256/timestamp',
                    alias: keyAlias,
                    jar: it,
                    keystore: "${keystoreFile.absolutePath}",
                    storepass: keystorePass,
                    destDir: 'build/libs',
                    verbose: true,
                    preservelastmodified: 'true'
            )
        }
    }
}
*/

task removeContract(type: Delete) {
    delete fileTree(file('build/libs').absolutePath + '/../../../yggdrash-core/src/main/resources/system-contracts').include('*')
}

def generateSha1(File file) {
    MessageDigest md = MessageDigest.getInstance("SHA-1");
    file.eachByte 4096, {bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().collect {String.format "%02x", it}.join();
}

task copyContractToCoreBuildResrouce(type: Copy) {
    dependsOn contractsPackage
    dependsOn removeContract
    dependsOn contractsPackage

    def copyPath = file('build/libs').absolutePath + '/../../../yggdrash-core/build/resources/main/system-contracts'
    def copyResourcePath = file('build/libs').absolutePath + '/../../../yggdrash-core/src/main/resources/system-contracts'

    from file('build/libs')
    into file("${copyPath}")
    exclude "${project.name}*"

    doLast {
        def contractsFile = [file("${copyPath}/contracts"), file("${copyResourcePath}/contracts")]
        contractsFile.each {
            it.delete()
            it.getParentFile().mkdirs()
            it.createNewFile()

            def fw = new FileWriter(it, true)
            def libFiles = file('build/libs').listFiles()
            def totalSize = libFiles.length
            def cnt = 0
            libFiles.each {
                if (it.name.startsWith("${project.name}")) {
                    return
                }
                cnt++
                if (cnt == totalSize) {
                    fw.write(it.getName())
                } else {
                    fw.write("${it.getName()}\n")
                }
                fw.flush()
            }
            if (fw != null) {
                fw.close()
            }
        }
    }
}


task copyContractToResrouce(type: Copy) {
    dependsOn contractsPackage
    dependsOn removeContract
    dependsOn contractsPackage
    //dependsOn signJar

    def copyPath = file('build/libs').absolutePath + '/../contract'
    file("${copyPath}").mkdirs()

    // Copy Contract File
    from file('build/libs')
    into file("${copyPath}")
    exclude "${project.name}*"

    doLast {
        def libFiles = file("${copyPath}").listFiles()
        libFiles.each {
            def sha1Name = generateSha1(it)+'.jar'
            def sha1File = file("${copyPath}/"+sha1Name)
            if (it.getName().endsWith('.jar') && it.getName() != sha1Name) {
                println it.getName() + ' -> ' + sha1Name
                it.renameTo(sha1File)
            }
        }
    }
}
task copyContractToProject(type: Copy) {
    dependsOn copyContractToResrouce

    def copyPath = file('build/libs').absolutePath + '/../contract'
    def projectContractPath = file('build/libs').absolutePath + '/../../../resources/contract'
    from file("${copyPath}")
    into file("${projectContractPath}")
}

task copyProjectContractToCoreProject(type: Copy) {
    def projectContractPath = file('build/libs').absolutePath + '/../../../resources/contract'

    def coreContractPath = file('build/libs').absolutePath + '/../../../yggdrash-core/.yggdrash/contract'

    from file("${projectContractPath}")
    into file("${coreContractPath}")
}

task copyProjectContractToNodeProject(type: Copy) {
    dependsOn copyContractToProject

    def projectContractPath = file('build/libs').absolutePath + '/../../../resources/contract'
    def nodeContractPath = file('build/libs').absolutePath + '/../../../yggdrash-node/.yggdrash/contract'
    file(nodeContractPath).mkdirs()

    from file("${projectContractPath}")
    into file("${nodeContractPath}")
}



jar {
    dependsOn copyProjectContractToCoreProject
    dependsOn copyProjectContractToNodeProject
}

dependencies {
    compile project(':yggdrash-common')
}